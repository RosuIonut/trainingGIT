/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c GpsServiceIf -p GpsServiceIf.h:GpsServiceIf.cpp org.osmnavi.GpsService.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GPSSERVICEIF_H
#define GPSSERVICEIF_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.osmnavi.GpsService
 */
class GpsServiceIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.osmnavi.GpsService"; }

public:
    GpsServiceIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~GpsServiceIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uint> getCourse()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getCourse"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> getData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getData"), argumentList);
    }

    inline QDBusPendingReply<double> getLatitude()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLatitude"), argumentList);
    }

    inline QDBusPendingReply<double> getLongitude()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLongitude"), argumentList);
    }

    inline QDBusPendingReply<double> getSpeed()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSpeed"), argumentList);
    }

    inline QDBusPendingReply<> refreshGpsData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("refreshGpsData"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void coordinatesChanged(double latitude, double longitude);
};

namespace org {
  namespace osmnavi {
    typedef ::GpsServiceIf GpsService;
  }
}
#endif
